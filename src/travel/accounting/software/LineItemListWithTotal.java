/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package travel.accounting.software;

import javafx.collections.ListChangeListener;
import javafx.collections.ObservableList;
import javafx.collections.transformation.TransformationList;

/**
 *
 * @author gaj
 */
 public class LineItemListWithTotal extends
            TransformationList<Balance, Balance> {

        private final TotalLine totalLine;

        protected LineItemListWithTotal(
                ObservableList<? extends Balance> source) {
            super(source);
            totalLine = new TotalLine(source);
        }

        @Override
        protected void sourceChanged(ListChangeListener.Change<? extends Balance> c) {

            // no need to modify change:
            // indexes generated by the source list will match indexes in this
            // list

            fireChange(c);
        }

        // if index is in range for source list, just return that index
        // otherwise return -1, indicating index is not represented in source
        @Override
        public int getSourceIndex(int index) {
            if (index < getSource().size()) {
                return index;
            }
            return -1;
        }

        // if index is in range for source list, return corresponding
        // item from source list.
        // if index is one after the last element in the source list,
        // return total line.
        @Override
        public Balance get(int index) {
            if (index < getSource().size()) {
                return getSource().get(index);
            } else if (index == getSource().size()) {
                return totalLine;
            } else
                throw new ArrayIndexOutOfBoundsException(index);
        }

        // size of transformation list is one bigger than size of source list:
        @Override
        public int size() {
            return getSource().size() + 1;
        }

    }